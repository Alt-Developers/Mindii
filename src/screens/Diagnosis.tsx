import { useState } from "react";
import { View, Text, StyleSheet, Alert, Modal } from "react-native";
import { useNavigation } from "@react-navigation/native";

import CustomButton from "../components/CustomButton";
import RootContainer from "../components/RootContainer";
import SelectSymptom from "../components/diagnosisPages/SelectSymptom";
import SelectOptions from "../components/diagnosisPages/SelectOptions";

import {
  diagnosisDataType,
  screenType,
  symptom,
  symptomLength,
} from "../models/diagnosisTypes";
import { LearnMoreLinks } from "react-native/Libraries/NewAppScreen";
import Conclusions from "./Conclusions";
import { conclusion } from "../models/conclusionTypes";

// const { height: screenHeight, width: screenWidth } = Dimensions.get("window");

const diagnosisData: diagnosisDataType = {
  screenIndex: 0,
  screenType: ["selectSymptom"],
  options: [],
  optionsSettings: { checklist: false, header: "", subheader: "" },
  symptomList: [],
  selectedOptionList: [],
};

const symptomLengthList: symptomLength[] = [
  {
    value: "2-3",
    name: "2-3 ‡∏ß‡∏±‡∏ô",
  },
  {
    value: "7",
    name: "1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
  },
];

const logDiagnosisData = () => {
  console.log(
    `
    --------------------------
    screenIndex: ${diagnosisData.screenIndex},
    screenType: ${diagnosisData.screenType},
    options: ${JSON.stringify(diagnosisData.options)},
    optionsSettings: ${JSON.stringify(diagnosisData.optionsSettings)},
    symptomList: ${JSON.stringify(diagnosisData.symptomList)},
    selectedOptionList: ${JSON.stringify(diagnosisData.selectedOptionList)}
    --------------------------
    `
  );
};

const Diagnosis = (props) => {
  const navigation = useNavigation();
  const [symptomList, setSymptomList] = useState<symptom[]>([
    {
      id: "heavy_diarrhea",
      name: "‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏ô‡∏±‡∏Å",
      emoji: "üí©",
      description:
        "‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞‡πÄ‡∏´‡∏•‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡πâ‡∏≥ 4-5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24‡∏ä‡∏°",
    },
    {
      id: "fever",
      name: "‡πÑ‡∏Ç‡πâ",
      emoji: "ü§í",
      description:
        "‡∏†‡∏≤‡∏ß‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
    },
  ]);
  const [conclusionsVisible, setConclusionsVisible] = useState<boolean>(false);
  const [conclusion, setConclusion] = useState<conclusion>({
    diseaseName: "",
    flags: [],
    imageUri: "",
    description: "",
  });
  const screenIndex: number = diagnosisData.screenIndex;
  const screenType: screenType = diagnosisData.screenType[screenIndex];

  logDiagnosisData();

  const nextScreen = (nextScreenType) => {
    diagnosisData.screenType.push(nextScreenType);
    diagnosisData.screenIndex++;

    props.navigation.push("diagnosis");
  };

  const addSymptom = (symptom: symptom, nextScreenType) => {
    diagnosisData.symptomList.push(symptom);
    nextScreen(nextScreenType);
  };

  const addSymptomLength = (length: symptomLength, nextScreenType) => {
    diagnosisData["symptomList"][screenIndex - 1]["length"] = length;
    nextScreen(nextScreenType);
  };

  const jumpToConclusions = (conclusion: conclusion) => {
    setConclusion(conclusion);
    setConclusionsVisible(true);
    resetDiagnosisData();
  };

  const resetDiagnosisData = () => {
    const d = diagnosisData;
    d.screenIndex = 0;
    d.screenType = ["selectSymptom"];
    d.options = [];
    d.optionsSettings = {
      checklist: false,
      header: "",
      subheader: "",
    };
    d.symptomList = [];
    d.selectedOptionList = [];
  };

  const rewindSymptom = () => {
    if (screenIndex === 0) {
      Alert.alert(
        "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ",
        "‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏õ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á",
        [
          {
            text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
            onPress: () => {
              navigation.goBack();
              resetDiagnosisData();
            },
          },
          {
            text: "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡πà‡∏≠",
            style: "cancel",
          },
        ]
      );

      return;
    }

    const lastScreenType = diagnosisData["screenType"].at(-1);

    // Determine which screen type and remove previous information added
    switch (lastScreenType) {
      case "selectSymptom":
        diagnosisData.symptomList.splice(-1);
      case "symptomLength":
        delete diagnosisData.symptomList[diagnosisData.symptomList.length - 1];
      case "customOptions":
        diagnosisData.selectedOptionList.pop();
      // NOT SPLICING SCREENTYPE
    }
    logDiagnosisData();

    diagnosisData.screenType.splice(-1);
    diagnosisData.screenIndex--;
    navigation.goBack();
  };

  const createCustomOptions = ({
    header,
    subheader,
    options,
    nextDiagnosisPage,
    checklist = false,
  }) => {
    diagnosisData.options = options;
    options.at(-1).question = header;
    diagnosisData.optionsSettings = {
      checklist,
      header,
      subheader,
    };

    if (nextDiagnosisPage) nextScreen("customOptions");
  };

  const yesNoOptions = [
    { name: "‡πÉ‡∏ä‡πà", value: "yes" },
    { name: "‡πÑ‡∏°‡πà", value: "no" },
  ];

  const handleSelectSymtomPress = (symptom) => {
    const id = symptom.id;

    switch (id) {
      case "heavy_diarrhea":
        addSymptom(symptom, "customOptions");
        createCustomOptions({
          header: "‡∏Ñ‡∏∏‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤?",
          subheader: "",
          options: yesNoOptions,
          nextDiagnosisPage: false,
        });
    }
  };

  const handleSymptomLengthPress = (symptomLength) => {
    addSymptomLength(symptomLength.value, "selectSymptom");
  };

  const handleCustomOptionPress = (option, headerText) => {
    option.question = headerText;
    diagnosisData.selectedOptionList.push(option);

    const latestSelectedSymptom = diagnosisData.symptomList.at(-1);
    const latest = diagnosisData.selectedOptionList.at(-1);

    switch (latestSelectedSymptom.id) {
      case "heavy_diarrhea":
        if (latest.question === "‡∏Ñ‡∏∏‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤?") {
          if (latest.value === "yes")
            createCustomOptions({
              header: "‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏´‡∏°",
              subheader: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏£",
              checklist: true,
              options: [
                { name: "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢", value: "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢" },
                { name: "‡∏°‡∏∑‡∏≠‡∏™‡∏±‡πà‡∏ô", value: "‡∏°‡∏∑‡∏≠‡∏™‡∏±‡πà‡∏ô" },
                { name: "‡∏Ñ‡∏≠‡∏û‡∏≠‡∏Å", value: "‡∏Ñ‡∏≠‡∏û‡∏≠‡∏Å" },
                { name: "‡∏ï‡∏≤‡πÇ‡∏û‡∏ô", value: "‡∏ï‡∏≤‡πÇ‡∏û‡∏ô" },
                {
                  name: "‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥",
                  value: "‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥",
                },
              ],
              nextDiagnosisPage: true,
            });
          if (latest.value === "no") {
            nextScreen("selectSymptom");
          }
        }
        if (latest.question === "‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏´‡∏°") {
          if (latest.value === ">= 2") {
            jumpToConclusions({
              diseaseName: "‡∏ï‡πà‡∏≠‡∏°‡πÑ‡∏ó‡∏£‡∏≠‡∏¢‡∏î‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô ‡∏Ñ‡∏≠‡∏û‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏©",
              description:
                "‡∏ï‡πà‡∏≠‡∏°‡πÑ‡∏ó‡∏£‡∏≠‡∏¢‡∏î‡πå ‡∏Ñ‡∏∑‡∏≠ ‡∏ï‡πà‡∏≠‡∏°‡πÑ‡∏£‡πâ‡∏ó‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏•‡∏≥‡∏Ñ‡∏≠‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏Å‡∏£‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏ú‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏µ‡∏Å‡∏ã‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ç‡∏ß‡∏≤‡∏Ñ‡∏≠‡∏¢‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Æ‡∏≠‡∏£‡πå‡πÇ‡∏°‡∏ô‡πÑ‡∏ó‡∏£‡∏≠‡∏¢‡∏î‡πå ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏§‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏ß‡∏±‡∏¢‡∏ß‡∏∞ ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ó ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≠‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏¢‡πÄ‡∏î‡πá‡∏Å‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢ ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô",
              flags: ["visitDoctor"],
              imageUri:
                "https://www.vibhavadi.com/images/healthex/4299_01639541039.jpg",
            });
            // console.log("‡∏ï‡πà‡∏≠‡∏°‡πÑ‡∏ó‡∏£‡∏≠‡∏¢‡∏î‡πå ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô/ ‡∏Ñ‡∏≠‡∏û‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏© ‡∏´‡∏≤‡∏´‡∏°‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ");
            // props.navigation.navigate("conclusions");
          }
          if (latest.value === "< 2") {
            createCustomOptions({
              header: "‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏∞‡∏´‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ö‡πà‡∏≠‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
              subheader: "",
              options: yesNoOptions,
              nextDiagnosisPage: true,
            });
          }
        }
    }
    if (latest.question === "‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏´‡∏°") {
      if (latest.value === "no")
        createCustomOptions({
          header: "‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏∞‡∏´‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ö‡πà‡∏≠‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
          subheader: "",
          options: yesNoOptions,
          nextDiagnosisPage: true,
        });
    }
    if (latest.question === "‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏∞‡∏´‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ö‡πà‡∏≠‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà") {
      if (latest.value === "yes") {
        createCustomOptions({
          header:
            "‡∏Ç‡πà‡∏ß‡∏á‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏•‡∏ß,‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÄ‡∏´‡∏°‡πá‡∏ô‡∏°‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÉ‡∏ô‡∏≠‡∏∏‡∏à‡∏≤‡∏£‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
          subheader: "",
          options: yesNoOptions,
          nextDiagnosisPage: true,
        });
      }
    }
    if (
      latest.question ===
      "‡∏Ç‡πà‡∏ß‡∏á‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏•‡∏ß,‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÄ‡∏´‡∏°‡πá‡∏ô‡∏°‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÉ‡∏ô‡∏≠‡∏∏‡∏à‡∏≤‡∏£‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"
    ) {
      if (latest.value === "yes") {
        jumpToConclusions({
          diseaseName: "‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏à‡∏≤‡∏Å‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÑ‡∏Å‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢",
          description:
            "‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏ã‡∏±‡∏ß (‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ‡∏ä‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏∞‡∏°‡∏µ‡∏ö‡∏≤ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏•‡∏≥‡πÑ‡∏™‡πâ‡πÄ‡∏•‡πá‡∏Å ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏â‡∏µ‡∏¢‡∏ö‡∏û‡∏•‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á‡πÑ‡∏î‡πâ",
          flags: [],
          imageUri:
            "https://cth.co.th/wp-content/uploads/2021/05/Giardiasis2.jpg",
        });
      }
    }
  };

  const handleChecklistCompletion = (completeCheckList, headerText) => {
    let numberOfOptionsChecked = 0;
    completeCheckList.forEach((option) => {
      option.isChecked && numberOfOptionsChecked++;
    });

    console.log(numberOfOptionsChecked);
    if (numberOfOptionsChecked >= 2) {
      handleCustomOptionPress({ name: "2 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ", value: ">= 2" }, headerText);
    } else {
      handleCustomOptionPress({ name: "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2", value: "< 2" }, headerText);
    }
  };

  const displayScreenType = (type) => {
    switch (type) {
      case "selectSymptom":
        return (
          <SelectSymptom
            symptomList={symptomList}
            selectedSymptomHandler={handleSelectSymtomPress}
            diagnosisData={diagnosisData}
          />
        );
      case "symptomLength":
        return (
          <SelectOptions
            headerText={`‡∏Ñ‡∏∏ÔøΩÔøΩ‡∏°‡∏µ‡∏≠‡∏≤ÔøΩÔøΩ‡∏≤‡∏£${
              symptomList.find(
                (symptom) =>
                  symptom["id"] === diagnosisData.symptomList.slice(-1)[0]["id"]
              ).name
            }‡∏°‡∏≤‡∏ô‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô‡πÅ‡∏•‡πâ‡∏ß?`}
            optionsList={symptomLengthList}
            onOptionPress={handleSymptomLengthPress}
          />
        );
      case "customOptions":
        return (
          <SelectOptions
            optionsList={diagnosisData.options}
            optionsSettings={diagnosisData.optionsSettings}
            onOptionPress={handleCustomOptionPress}
            onChecklistCompletion={handleChecklistCompletion}
          />
        );
      default:
    }
  };

  return (
    <RootContainer>
      <Modal
        visible={conclusionsVisible}
        presentationStyle="pageSheet"
        animationType="slide"
      >
        <Conclusions conclusion={conclusion} />
      </Modal>
      {displayScreenType(screenType)}
      <CustomButton style={s.backButton} onPress={rewindSymptom}>
        <Text style={{ fontFamily: "SemiBold" }}>‡∏Å‡∏•‡∏±‡∏ö</Text>
      </CustomButton>
    </RootContainer>
  );
};

const s = StyleSheet.create({
  headerText: {
    fontSize: 40,
    fontFamily: "SemiBold",
  },
  headerDescriptionText: {
    fontSize: 15,
    fontFamily: "SemiBold",
    marginBottom: 10,
  },

  backButton: {
    position: "absolute",
    bottom: 30,
    left: 30,
    backgroundColor: "#fdfdfd",
    padding: 20,
    borderRadius: 20,
    shadowColor: "black",
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 6,
    shadowOpacity: 0.25,
  },
});

export default Diagnosis;

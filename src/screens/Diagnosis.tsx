import { useState } from "react";
import { View, Text, StyleSheet, Alert, Modal } from "react-native";
import { useNavigation } from "@react-navigation/native";
import { useDispatch, useSelector } from "react-redux";

import CustomButton from "../components/CustomButton";
import RootContainer from "../components/RootContainer";
import SelectSymptom from "../components/diagnosisPages/SelectSymptom";
import SelectOptions from "../components/diagnosisPages/SelectOptions";
import Conclusions from "./Conclusions";
import LottieView from "lottie-react-native";
import { ErrorBoundary } from "react-error-boundary";
import { conclusionActions } from "../context/conclusionSlice";
import { authenticationActions } from "../context/authenticationSlice";
import { writeConclusionHistory } from "../context/conclusionSlice";
import { Fonts } from "../constants/styles";
import { conclusionsList } from "./Conclusions";

import {
  diagnosisDataType,
  diagnosisOption,
  screenType,
  symptom,
  symptomLength,
} from "../models/diagnosisTypes";
import { StackNavigation } from "../../App";
import { create } from "react-test-renderer";
import { RootState } from "../context/store";

let diagnosisData: diagnosisDataType = {
  screenIndex: 0,
  screenType: ["selectSymptom"],
  options: [],
  optionsSettings: { checklist: false, header: "", subheader: "" },
  symptomList: [],
  selectedOptionList: [],
};

const symptomLengthList: symptomLength[] = [
  {
    value: "2-3",
    name: "2-3 ‡∏ß‡∏±‡∏ô",
  },
  {
    value: "7",
    name: "1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
  },
];

const logDiagnosisData = () => {
  console.log(
    `
    --------------------------
    screenIndex: ${diagnosisData.screenIndex},
    screenType: ${diagnosisData.screenType},
    options: ${JSON.stringify(diagnosisData.options)},
    optionsSettings: ${JSON.stringify(diagnosisData.optionsSettings)},
    symptomList: ${JSON.stringify(diagnosisData.symptomList)},
    selectedOptionList: ${JSON.stringify(diagnosisData.selectedOptionList)}
    --------------------------
    `
  );
};

const Diagnosis = (props) => {
  const navigation = useNavigation<StackNavigation>();
  const symptomList = [
    {
      id: "heavy_diarrhea",
      name: "‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏ô‡∏±‡∏Å",
      emoji: "üí©",
      description:
        "‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞‡πÄ‡∏´‡∏•‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡πâ‡∏≥ 4-5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24‡∏ä‡∏°",
    },
    {
      id: "fever",
      name: "‡πÑ‡∏Ç‡πâ",
      emoji: "ü§í",
      description:
        "‡∏†‡∏≤‡∏ß‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
    },
    {
      id: "vomit",
      name: "‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô",
      emoji: "ü§Æ",
      description:
        "‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô ‡∏Ñ‡∏∑‡∏≠ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏£‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏û‡∏≤‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏ó‡∏≤‡∏á‡∏õ‡∏≤‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß",
    },
    {
      id: "cough",
      name: "‡πÑ‡∏≠",
      emoji: "ü§ß",
      description:
        "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏≠ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏Ñ‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏∑‡∏≠‡∏á‡πÉ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ",
    },
    {
      id: "irregular_heartbeat",
      name: "‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡∏ú‡∏¥‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞",
      emoji: "‚ù§Ô∏è‚Äçüî•",
      description:
        "‡∏†‡∏≤‡∏ß‡∏∞‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ã‡∏∂‡πà‡∏á‡∏≠‡∏≤‡∏à‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏±‡∏ß‡πÉ‡∏à",
    },
  ];
  const [conclusionsVisible, setConclusionsVisible] = useState<boolean>(false);
  const [conclusion, setConclusion] = useState<string>("");
  const [loading, setLoading] = useState<boolean>(false);
  const screenIndex: number = diagnosisData.screenIndex;
  const screenType: screenType = diagnosisData.screenType[screenIndex];
  const userUid = useSelector<RootState>((state) => state.authentication.uid);
  const userInfo = useSelector<RootState, { birthday: string }>(
    (state) => state.authentication.userInformation as { birthday: string }
  );
  const dispatch = useDispatch<any>();

  logDiagnosisData();

  const nextScreen = (nextScreenType: screenType) => {
    diagnosisData.screenType.push(nextScreenType);
    diagnosisData.screenIndex++;

    props.navigation.push("diagnosis");
  };

  const addSymptom = (symptom: symptom, nextScreenType: screenType) => {
    diagnosisData.symptomList.push(symptom);
    nextScreen(nextScreenType);
  };

  // const addSymptomLength = (length: symptomLength, nextScreenType: screenType) => {
  //   diagnosisData["symptomList"][screenIndex - 1]["length"] = length;
  //   nextScreen(nextScreenType);
  // };

  const resetDiagnosisData = () => {
    diagnosisData = {
      screenIndex: 0,
      screenType: ["selectSymptom"],
      options: [],
      optionsSettings: { checklist: false, header: "", subheader: "" },
      symptomList: [],
      selectedOptionList: [],
    };
  };

  const jumpToConclusions = (conclusionId: string) => {
    dispatch(
      conclusionActions.setDisplayConclusion({
        diseaseId: conclusionId,
        diagnosisData: diagnosisData,
      })
    );
    if (conclusionId in conclusionsList) {
      console.log("Dispatching");

      console.log(
        "THE CONCLUSION ID EXISTS: ",
        conclusionId in conclusionsList
      );

      if (conclusionId !== "no_match") {
        console.log("Writing conclusion history");
        dispatch(writeConclusionHistory(userUid));
      }
      if (conclusionId !== "serious_no_match") {
        console.log("Writing conclusion history");
        dispatch(writeConclusionHistory(userUid));
      }
    }

    console.log("Jumping to conclusions:", conclusionId);

    resetDiagnosisData();
    setLoading(true);
    setTimeout(() => {
      resetDiagnosisData();

      navigation.navigate("conclusions");
      setLoading(false);
    }, 2000);
  };

  const rewindSymptom = () => {
    if (screenIndex === 0) {
      Alert.alert(
        "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ",
        "‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏≠‡∏Å‡πÑ‡∏õ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á",
        [
          {
            text: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
            onPress: () => {
              navigation.goBack();
              resetDiagnosisData();
            },
          },
          {
            text: "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡πà‡∏≠",
            style: "cancel",
          },
        ]
      );

      return;
    }

    const lastScreenType =
      diagnosisData["screenType"][diagnosisData.screenIndex - 1];

    console.log(lastScreenType);

    // Determine which screen type and remove previous information added
    switch (lastScreenType) {
      case "selectSymptom":
        diagnosisData.symptomList.splice(-1);
      case "symptomLength":
        delete diagnosisData.symptomList[diagnosisData.symptomList.length - 1];
      case "customOptions":
        diagnosisData.selectedOptionList.pop();
      // NOT SPLICING SCREENTYPE
    }
    logDiagnosisData();

    diagnosisData.screenType.splice(-1);
    diagnosisData.screenIndex--;
    navigation.goBack();
  };

  const createCustomOptions = ({
    header,
    subheader,
    options,
    nextDiagnosisPage,
    checklist = false,
  }) => {
    diagnosisData.options = options;
    options.at(-1).question = header;
    diagnosisData.optionsSettings = {
      checklist,
      header,
      subheader,
    };

    if (nextDiagnosisPage) nextScreen("customOptions");
  };

  const yesNoOptions = [
    { name: "‡πÉ‡∏ä‡πà", value: "yes" },
    { name: "‡πÑ‡∏°‡πà", value: "no" },
  ];

  const createYesNoOptions = (
    header: string,
    nextDiagnosisPage: boolean,
    subheader = ""
  ) => {
    createCustomOptions({
      header,
      subheader,
      options: yesNoOptions,
      nextDiagnosisPage,
    });
  };

  const handleSelectSymtomPress = (symptom) => {
    const id = symptom.id;
    const symptomList = diagnosisData.symptomList;

    switch (id) {
      case "heavy_diarrhea":
        addSymptom(symptom, "customOptions");
        createYesNoOptions("‡∏Ñ‡∏∏‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤?", false);
        break;
      case "fever":
        if (screenIndex === 0) {
          addSymptom(symptom, "customOptions");
          createCustomOptions({
            header: "‡∏à‡∏≤‡∏Å 3 ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏´‡∏°",
            subheader: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÑ‡∏õ‡∏ï‡πà‡∏≠",
            checklist: true,
            options: [
              { name: "‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ï‡∏±‡∏ß", value: "‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ï‡∏±‡∏ß" },
              { name: "‡∏õ‡∏ß‡∏î‡∏®‡∏µ‡∏£‡∏©‡∏∞‡∏°‡∏≤‡∏Å", value: "‡∏õ‡∏ß‡∏î‡∏®‡∏µ‡∏£‡∏©‡∏∞‡∏°‡∏≤‡∏Å" },
              {
                name: "‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏±‡∏Å",
                value: "‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏±‡∏Å",
              },
            ],
            nextDiagnosisPage: false,
          });
          return;
        } else if (
          symptomList[0]["id"] === "heavy_diarrhea" &&
          symptom.id === "fever"
        ) {
          addSymptom(symptom, "customOptions");
          createYesNoOptions(
            "‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏∏‡∏á‡πÄ‡∏¢‡∏≠‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
            false
          );
        }

        break;
      case "vomit":
        addSymptom(symptom, "customOptions");
        createYesNoOptions("‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Å‡∏≤‡πÅ‡∏ü‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", false);
      case "no_match":
        if (
          symptomList[0]["id"] === "heavy_diarrhea" &&
          symptom.id === "no_match"
        ) {
          addSymptom(symptom, "customOptions");
          createYesNoOptions(
            "‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡∏ñ‡πà‡∏≤‡∏¢ ‡∏¢‡∏≤‡∏•‡∏î‡∏Å‡∏£‡∏î ‡∏¢‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏£‡∏Ñ‡πÄ‡∏Å‡∏≤‡∏ï‡πå ‡∏°‡∏∞‡∏Ç‡∏≤‡∏°‡πÅ‡∏Ç‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
            false
          );
        }
    }
  };

  // const handleSymptomLengthPress = (symptomLength) => {
  //   addSymptomLength(symptomLength.value, "selectSymptom");
  // };

  const handleCustomOptionPress = (
    option: diagnosisOption,
    headerText: string
  ) => {
    option.question = headerText;
    diagnosisData.selectedOptionList.push(option);

    const latestSelectedSymptom = diagnosisData.symptomList.at(-1);
    const latest = diagnosisData.selectedOptionList.at(-1);

    if (!latestSelectedSymptom || !latest) {
      console.error("No symptoms or options available");
      return;
    }

    switch (latestSelectedSymptom.id) {
      //////////////////////// HEAVY DIARRHEA q&as ////////////////////////
      case "heavy_diarrhea":
        if (latest.question === "‡∏Ñ‡∏∏‡∏ì‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤?") {
          if (latest.value === "yes") {
            createCustomOptions({
              header: "‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏´‡∏°",
              subheader: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÑ‡∏õ‡∏ï‡πà‡∏≠",
              checklist: true,
              options: [
                { name: "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢", value: "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢" },
                { name: "‡∏°‡∏∑‡∏≠‡∏™‡∏±‡πà‡∏ô", value: "‡∏°‡∏∑‡∏≠‡∏™‡∏±‡πà‡∏ô" },
                { name: "‡∏Ñ‡∏≠‡∏û‡∏≠‡∏Å", value: "‡∏Ñ‡∏≠‡∏û‡∏≠‡∏Å" },
                { name: "‡∏ï‡∏≤‡πÇ‡∏û‡∏ô", value: "‡∏ï‡∏≤‡πÇ‡∏û‡∏ô" },
                {
                  name: "‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥",
                  value: "‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥",
                },
              ],
              nextDiagnosisPage: true,
            });
          } else if (latest.value === "no") {
            nextScreen("selectSymptom");
          }
        }
        if (latest.question === "‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏´‡∏°") {
          const optionsChecked = parseInt(latest.value);

          if (optionsChecked >= 2) {
            jumpToConclusions("thyroid");
          } else {
            createYesNoOptions("‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏∞‡∏´‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ö‡πà‡∏≠‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", true);
          }
        }
        break;

      //////////////////////// FEVER q&as ////////////////////////
      case "fever":
        if (latest.question === "‡∏à‡∏≤‡∏Å 3 ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏´‡∏°") {
          const optionsChecked = parseInt(latest.value);

          if (optionsChecked === 3) {
            const birthDate = new Date(userInfo.birthday);
            const ageDifMs = Date.now() - birthDate.getTime();
            const ageDate = new Date(ageDifMs);
            const age = Math.abs(ageDate.getUTCFullYear() - 1970);

            if (age >= 18) {
              createCustomOptions({
                header: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏∏‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
                subheader: `‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏ ${age} ‡∏õ‡∏µ`,
                options: yesNoOptions,
                nextDiagnosisPage: true,
              });
            } else {
              jumpToConclusions("no_match");
            }
          } else {
            createYesNoOptions(
              "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÑ‡∏Ç‡πâ‡∏≠‡πà‡∏≠‡∏ô‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
              true,
              "‡πÑ‡∏Ç‡πâ‡∏≠‡πà‡∏≠‡∏ô‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏°‡∏µ 37.5-38 ‡∏≠‡∏á‡∏®‡∏≤"
            );
          }
        }

        if (latest.question === "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÑ‡∏Ç‡πâ‡∏≠‡πà‡∏≠‡∏ô‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà") {
          if (latest.value === "yes") {
            createYesNoOptions("‡πÑ‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡πç‡πâ‡∏≤‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î‡∏Æ‡∏ß‡∏ö", true);
          } else {
            createYesNoOptions("‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏ö‡πÜ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏•‡∏∂‡∏Å‡πÜ", true);
          }
        }
        if (latest.question === "‡πÑ‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡πç‡πâ‡∏≤‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î‡∏Æ‡∏ß‡∏ö") {
          if (latest.value === "yes") {
            jumpToConclusions("tuberculosis");
          } else {
            createYesNoOptions(
              "‡∏õ‡∏ß‡∏î‡∏Ç‡πâ‡∏≠‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠ ‡∏ú‡∏°‡∏£‡πà‡∏ß‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏ú‡∏∑‡πà‡∏ô‡∏õ‡∏µ‡∏Å‡∏ú‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏à‡∏°‡∏π‡∏Å",
              true
            );
          }
        }
        if (
          latest.question ===
          "‡∏õ‡∏ß‡∏î‡∏Ç‡πâ‡∏≠‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠ ‡∏ú‡∏°‡∏£‡πà‡∏ß‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏ú‡∏∑‡πà‡∏ô‡∏õ‡∏µ‡∏Å‡∏ú‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏à‡∏°‡∏π‡∏Å"
        ) {
          if (latest.value === "yes") {
            jumpToConclusions("sle");
          } else {
            createYesNoOptions(
              "‡∏à‡∏±‡∏ö‡πÑ‡∏Ç‡πâ‡∏´‡∏ô‡∏≤‡∏ß‡∏™‡∏±‡πà‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏∏‡∏á",
              true
            );
          }
        }
        if (
          latest.question ===
          "‡∏à‡∏±‡∏ö‡πÑ‡∏Ç‡πâ‡∏´‡∏ô‡∏≤‡∏ß‡∏™‡∏±‡πà‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏∏‡∏á"
        ) {
          if (latest.value === "yes") {
            jumpToConclusions("malaria");
          } else {
            createYesNoOptions("‡∏°‡∏µ‡∏à‡∏∏‡∏î‡πÅ‡∏î‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏ï‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ï‡πâ‡πÄ‡∏•‡πá‡∏ö", true);
          }
        }
        if (latest.question === "‡∏°‡∏µ‡∏à‡∏∏‡∏î‡πÅ‡∏î‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏¢‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏ï‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ï‡πâ‡πÄ‡∏•‡πá‡∏ö") {
          if (latest.value === "yes") {
            jumpToConclusions("pericarditis");
          } else {
            jumpToConclusions("serious_no_match");
          }
        }

        // if (latest.question === "‡∏´‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á") {
        //   if (latest.value === "yes") {
        //     jumpToConclusions("serious_no_match");
        //   } else {
        //     createYesNoOptions("‡∏ã‡∏µ‡∏î ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡πÅ‡∏î‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏à‡πç‡πâ‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß", true);
        //   }
        // }
        // if (latest.question === "‡∏ã‡∏µ‡∏î ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡πÅ‡∏î‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏à‡πç‡πâ‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß") {
        //   if (latest.value === "yes") {
        //     jumpToConclusions("serious_no_match");
        //   } else {
        //     createYesNoOptions("‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏ö‡πÜ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏•‡∏∂‡∏Å‡πÜ", true);
        //   }
        // }
        if (latest.question === "‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏ö‡πÜ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏•‡∏∂‡∏Å‡πÜ") {
          if (latest.value === "yes") {
            jumpToConclusions("pneumonia");
          } else {
            createYesNoOptions(
              "‡∏°‡∏µ‡πÑ‡∏Ç‡πâ‡∏™‡∏π‡∏á ‡∏≠‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏•‡∏µ‡∏¢ ‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏™‡πâ ‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô ‡∏õ‡∏ß‡∏î‡∏®‡∏µ‡∏£‡∏©‡∏∞ ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á",
              true
            );
          }
        }
        if (latest.question === "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á") {
          if (latest.value === "yes") {
            jumpToConclusions("skin_infection");
          }
        }
        if (
          latest.question ===
          "‡∏°‡∏µ‡πÑ‡∏Ç‡πâ‡∏™‡∏π‡∏á ‡∏≠‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏•‡∏µ‡∏¢ ‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏™‡πâ ‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô ‡∏õ‡∏ß‡∏î‡∏®‡∏µ‡∏£‡∏©‡∏∞ ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á"
        ) {
          if (latest.value === "yes") {
            jumpToConclusions("heatstroke");
          } else {
            createYesNoOptions("‡∏°‡∏µ‡πÑ‡∏Ç‡πâ‡∏™‡∏π‡∏á‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏•‡∏∞ ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏á‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡πÅ‡∏î‡∏á", true);
          }
        }

        if (latest.question === "‡∏°‡∏µ‡πÑ‡∏Ç‡πâ‡∏™‡∏π‡∏á‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏•‡∏∞ ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏á‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡πÅ‡∏î‡∏á") {
          if (latest.value === "yes") {
            jumpToConclusions("dengue");
          } else {
            jumpToConclusions("no_match");
          }
        }

        if (
          latest.question === "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏∏‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"
        ) {
          if (latest.value === "yes") {
            jumpToConclusions("malaria");
          } else {
            createCustomOptions({
              header: "‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏´‡∏°",
              subheader: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏£",
              checklist: true,
              options: [
                {
                  name: "‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏•‡∏π‡∏Å‡∏î‡πâ‡∏ß‡∏ô‡∏ô‡∏°‡∏Å‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏ß‡∏ô",
                  value: "‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏•‡∏π‡∏Å‡∏î‡πâ‡∏ß‡∏ô‡∏ô‡∏°‡∏Å‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏ß‡∏ô",
                },
                { name: "‡∏Å‡∏•‡∏±‡∏ß‡∏ô‡πâ‡∏≥", value: "‡∏Å‡∏•‡∏±‡∏ß‡∏ô‡πâ‡∏≥" },
              ],
              nextDiagnosisPage: true,
            });
          }
        }
        if (latest.question === "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏ß‡∏∞‡∏ä‡πá‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà") {
          if (latest.value === "yes") {
            jumpToConclusions("no_match");
          } else {
            createYesNoOptions("‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÑ‡∏Ç‡πâ‡∏°‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", true);
          }
        }
        if (latest.question === "‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏´‡∏°") {
          const optionsChecked = parseInt(latest.value);
          if (optionsChecked === 2) {
            jumpToConclusions("rabies");
          } else {
            createYesNoOptions(
              "‡πÑ‡∏Ç‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô",
              true
            );
          }
        }
        if (
          latest.question === "‡πÑ‡∏Ç‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ó‡πà‡∏≤‡∏°‡∏Å‡∏•‡∏≤‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô"
        ) {
          if (latest.value === "yes") {
            jumpToConclusions("heatstroke");
          } else {
            createYesNoOptions(
              "‡∏ä‡∏≤‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£‡πÅ‡∏Ç‡πá‡∏á ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏≠‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏±‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á",
              true,
              "‡∏ä‡∏≤‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£‡πÅ‡∏Ç‡πá‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πá‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏¢‡∏≤‡∏Å"
            );
          }
        }

        if (
          latest.question ===
          "‡∏ä‡∏≤‡∏Å‡∏£‡∏£‡πÑ‡∏Å‡∏£‡πÅ‡∏Ç‡πá‡∏á ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏≠‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏±‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á"
        ) {
          if (latest.value === "yes") {
            jumpToConclusions("tetanus");
          } else {
            jumpToConclusions("serious_no_match");
          }
        }

        if (latest.question === "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÑ‡∏Ç‡πâ‡∏°‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà") {
          if (latest.value === "yes") {
            createYesNoOptions("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏•‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", true);
          } else {
          }
        }

        if (
          latest.question ===
          "‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏õ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏∏‡∏á‡πÄ‡∏¢‡∏≠‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"
        ) {
          if (latest.value === "yes") {
            jumpToConclusions("malaria");
          } else if (latest.value === "no") {
            createYesNoOptions("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏Ç‡πâ‡∏™‡∏π‡∏á‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏•‡∏∞ ‡∏°‡πâ‡∏≤‡∏°‡πÇ‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", true);
          }
        }
        if (latest.question === "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏Ç‡πâ‡∏™‡∏π‡∏á‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡πÅ‡∏•‡∏∞ ‡∏°‡πâ‡∏≤‡∏°‡πÇ‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà") {
          if (latest.value === "yes") {
            jumpToConclusions("typhoid");
          } else if (latest.value === "no") {
            jumpToConclusions("no_match");
          }
        }
        break;
      //////////////////////// NO MATCH q&as ////////////////////////
      case "no_match":
        if (
          latest.question ===
          "‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏¥‡∏ô‡∏¢‡∏≤‡∏ñ‡πà‡∏≤‡∏¢ ‡∏¢‡∏≤‡∏•‡∏î‡∏Å‡∏£‡∏î ‡∏¢‡∏≤‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÇ‡∏£‡∏Ñ‡πÄ‡∏Å‡∏≤‡∏ï‡πå ‡∏°‡∏∞‡∏Ç‡∏≤‡∏°‡πÅ‡∏Ç‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"
        ) {
          console.log("here");
          if (latest.value === "no") {
            createYesNoOptions("‡∏Ñ‡∏∏‡∏ì‡∏ó‡πâ‡∏≠‡∏á‡∏ú‡∏π‡∏Å‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", true);
          } else if (latest.value === "yes") {
            jumpToConclusions("irritable_bowel");
          }
        }
        if (latest.question === "‡∏Ñ‡∏∏‡∏ì‡∏ó‡πâ‡∏≠‡∏á‡∏ú‡∏π‡∏Å‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?") {
          if (latest.value === "yes") {
            createYesNoOptions("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏•‡∏≥‡πÑ‡∏™‡πâ‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", true);
          } else if (latest.value === "no") {
            createYesNoOptions(
              "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏ß‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏ú‡∏•‡πà‡πÉ‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
              true,
              " ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏ß‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏ú‡∏•‡πà‡πÉ‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏≥‡πÑ‡∏™‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏ß‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏Å‡∏¢‡∏∑‡πà‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏ß‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏Å"
            );
          }
        }
        if (latest.question === "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏•‡∏≥‡πÑ‡∏™‡πâ‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà") {
          if (latest.value === "yes") {
            jumpToConclusions("irritable_bowel");
          } else if (latest.value === "no") {
            createYesNoOptions("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏ß‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏ú‡∏•‡πà‡πÉ‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", true);
          }
        }
        if (latest.question === "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏ß‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏Å‡πÇ‡∏ú‡∏•‡πà‡πÉ‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà") {
          if (latest.value === "yes") {
            jumpToConclusions("tricuriasis");
          } else if (latest.value === "no") {
            createYesNoOptions("‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏î‡∏∑‡πà‡∏°‡∏ô‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", true);
          }
        }
        if (latest.question === "‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏î‡∏∑‡πà‡∏°‡∏ô‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?") {
          if (latest.value === "yes") {
            jumpToConclusions("lactase_deficiency");
          } else if (latest.value === "no") {
            createYesNoOptions("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏î‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", true);
          }
        }
        if (latest.question === "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏î‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà") {
          if (latest.value === "yes") {
            createYesNoOptions("‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", true);
          } else if (latest.value === "no") {
            createYesNoOptions("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡πá‡∏ô ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", true);
          }
        }
        if (latest.question === "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà") {
          if (latest.value === "yes") {
            jumpToConclusions("irritable_bowel");
          } else if (latest.value === "no") {
            createYesNoOptions(
              "‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
              true
            );
          }
        }
        if (
          latest.question === "‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"
        ) {
          if (latest.value === "yes") {
            createYesNoOptions("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡πá‡∏ô ‡∏ö‡∏≤‡∏ß‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà", true);
          } else {
            jumpToConclusions("no_match");
          }
        }
        if (latest.question === "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡πá‡∏ô ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà") {
          if (latest.value === "yes") {
            jumpToConclusions("diabetes");
          } else {
            jumpToConclusions("no_match");
          }
        }
        break;
    }
    if (latest.question === "‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏£‡∏∞‡∏´‡∏≤‡∏¢‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ö‡πà‡∏≠‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà") {
      if (latest.value === "yes") {
        createYesNoOptions(
          "‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏•‡∏ß,‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÄ‡∏´‡∏°‡πá‡∏ô‡∏°‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÉ‡∏ô‡∏≠‡∏∏‡∏à‡∏≤‡∏£‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
          true
        );
      } else if (latest.value === "no") {
        jumpToConclusions("serious_no_match");
      }
    }
    if (
      latest.question ===
      "‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏•‡∏ß,‡∏°‡∏µ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡πÄ‡∏´‡∏°‡πá‡∏ô‡∏°‡∏≤‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÉ‡∏ô‡∏≠‡∏∏‡∏à‡∏≤‡∏£‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"
    ) {
      if (latest.value === "yes") {
        jumpToConclusions("giardia");
      } else {
        jumpToConclusions("serious_no_match");
      }
    }
  };

  const handleChecklistCompletion = (completeCheckList, headerText: string) => {
    let numberOfOptionsChecked = 0;
    completeCheckList.forEach((option) => {
      option.isChecked && numberOfOptionsChecked++;
    });

    handleCustomOptionPress(
      {
        name: numberOfOptionsChecked.toString(),
        value: numberOfOptionsChecked.toString(),
        question: headerText,
      },
      headerText
    );

    // if (numberOfOptionsChecked >= 2) {
    //   handleCustomOptionPress(
    //     { name: "2 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ", value: ">= 2", question: headerText },
    //     headerText
    //   );
    // } else {
    //   handleCustomOptionPress(
    //     { name: "‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2", value: "< 2", question: headerText },
    //     headerText
    //   );
    // }
  };

  const displayScreenType = (type) => {
    if (loading)
      return (
        <View style={{ justifyContent: "center", alignItems: "center" }}>
          <LottieView
            source={require("../../assets/animations/findingAnimation.json")}
            style={{ width: 400, height: 400 }}
            autoPlay
          />
          {/* <Animated.Text
              style={[
              s.loadingText,
              {
                color: "#fff",
                opacity: 1,
                transform: [
                {
                  scale: 2.interpolate({
                  inputRange: [0, 1],
                  outputRange: [1, 1.2],
                  }),
                },
                ],
              },
              ]}
            >
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
            </Animated.Text> */}
        </View>
      );

    switch (type) {
      case "selectSymptom":
        return (
          <SelectSymptom
            symptomList={symptomList}
            selectedSymptomHandler={handleSelectSymtomPress}
            diagnosisData={diagnosisData}
          />
        );
      // case "symptomLength":
      //   return (
      //     <SelectOptions
      //       headerText={`‡∏Ñ‡∏∏ÔøΩÔøΩ‡∏°‡∏µ‡∏≠‡∏≤ÔøΩÔøΩ‡∏≤‡∏£${
      //         symptomList.find(
      //           (symptom) =>
      //             symptom["id"] === diagnosisData.symptomList.slice(-1)[0]["id"]
      //         ).name
      //       }‡∏°‡∏≤‡∏ô‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô‡πÅ‡∏•‡πâ‡∏ß?`}
      //       optionsList={symptomLengthList}
      //       onOptionPress={handleSymptomLengthPress}
      //     />
      //   );
      case "customOptions":
        return (
          <SelectOptions
            optionsList={diagnosisData.options}
            optionsSettings={diagnosisData.optionsSettings}
            onOptionPress={handleCustomOptionPress}
            onChecklistCompletion={handleChecklistCompletion}
          />
        );
      default:
    }
  };

  return (
    <ErrorBoundary
      fallback={
        <>
          <Text>404</Text>
        </>
      }
    >
      <RootContainer>
        <Modal
          visible={conclusionsVisible}
          presentationStyle="pageSheet"
          animationType="slide"
        >
          <Conclusions conclusionId={conclusion} />
        </Modal>
        {displayScreenType(screenType)}
        {!loading && (
          <CustomButton style={s.backButton} onPress={rewindSymptom}>
            <Text style={{ fontFamily: Fonts.regular }}>‡∏Å‡∏•‡∏±‡∏ö</Text>
          </CustomButton>
        )}
      </RootContainer>
    </ErrorBoundary>
  );
};

const s = StyleSheet.create({
  headerText: {
    fontSize: 40,
    fontFamily: Fonts.regular,
  },
  headerDescriptionText: {
    fontSize: 15,
    fontFamily: Fonts.regular,
    marginBottom: 10,
  },

  backButton: {
    position: "absolute",
    bottom: 30,
    left: 30,
    backgroundColor: "#fdfdfd",
    padding: 20,
    borderRadius: 20,
    shadowColor: "black",
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 6,
    shadowOpacity: 0.25,
  },
  loadingText: {
    fontFamily: Fonts.regular,
  },
});

export default Diagnosis;

import { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  Image,
  TextInput,
  FlatList,
  Dimensions,
} from "react-native";
import { useNavigation } from "@react-navigation/native";

import CustomButton from "../components/CustomButton";
import RootContainer from "../components/RootContainer";
import SelectSymptom from "../components/diagnosisPages/SelectSymptom";
import SelectOptions from "../components/diagnosisPages/SelectOptions";

// const { height: screenHeight, width: screenWidth } = Dimensions.get("window");

const diagnosisData = {
  screenIndex: 0,
  screenType: ["selectSymptom"],
  symptomList: [],
};

const symptomLengthList = [
  {
    value: "2-3",
    name: "2-3 ‡∏ß‡∏±‡∏ô",
  },
  {
    value: "7",
    name: "1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå",
  },
];

const Diagnosis = (props) => {
  const navigation = useNavigation();
  const screenIndex = diagnosisData.screenIndex;
  const screenType = diagnosisData.screenType[screenIndex];
  const previousScreenType = diagnosisData.screenType[screenIndex - 1];
  const [symptomList, setSymptomList] = useState([
    {
      id: "heavy_diarrhea",
      name: "‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏ô‡∏±‡∏Å",
      emoji: "üí©",
      description:
        "‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞‡πÄ‡∏´‡∏•‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡πâ‡∏≥ 4-5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24‡∏ä‡∏°",
    },
    {
      id: "fever",
      name: "‡πÑ‡∏Ç‡πâ",
      emoji: "ü§í",
      description:
        "‡∏†‡∏≤‡∏ß‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
    },
    {
      id: "runny_nose",
      name: "‡∏ô‡πâ‡∏≥‡∏°‡∏π‡∏Å‡πÑ‡∏´‡∏•",
      emoji: "ü§ß",
      description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏¢‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏à‡∏°‡∏π‡∏Å ‡∏°‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ß‡∏±‡∏î",
    },
    {
      id: "cough",
      name: "‡πÑ‡∏≠",
      emoji: "üò∑",
      description: "‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡πÉ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à",
    },
    {
      id: "headache",
      name: "‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß",
      emoji: "ü§ï",
      description:
        "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏õ‡∏ß‡∏î‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏®‡∏µ‡∏£‡∏©‡∏∞ ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î ‡πÑ‡∏°‡πÄ‡∏Å‡∏£‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏ß‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
    },
    {
      id: "chills",
      name: "‡∏´‡∏ô‡∏≤‡∏ß‡∏™‡∏±‡πà‡∏ô",
      emoji: "ü§í",
      description: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏´‡∏ô‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏ô ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏°‡∏µ‡πÑ‡∏Ç‡πâ‡∏™‡∏π‡∏á",
    },
    {
      id: "nausea",
      name: "‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏™‡πâ",
      emoji: "ü§¢",
      description: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏û‡∏≤‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ô‡∏≥‡πÑ‡∏õ‡∏™‡∏π‡πà‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô",
    },
    {
      id: "stomach_pain",
      name: "‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á",
      emoji: "ü§ï",
      description: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡πâ‡∏≠‡∏á ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
    },
    {
      id: "fatigue",
      name: "‡∏≠‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏•‡∏µ‡∏¢",
      emoji: "üò¥",
      description:
        "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏•‡πâ‡∏≤ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î",
    },
    {
      id: "sore_throat",
      name: "‡πÄ‡∏à‡πá‡∏ö‡∏Ñ‡∏≠",
      emoji: "ü§í",
      description: "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏ö‡∏Ñ‡∏≠ ‡∏°‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡∏•‡∏≥‡∏Ñ‡∏≠",
    },
    {
      id: "ear_congestion",
      name: "‡∏´‡∏π‡∏≠‡∏∑‡πâ‡∏≠",
      emoji: "üëÇ",
      description:
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏∏‡∏î‡∏Å‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡∏´‡∏π ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏®",
    },
  ]);

  console.log(`--------------------`);
  console.log(diagnosisData);

  const addSymptom = (symptom, nextScreenType) => {
    diagnosisData.symptomList.push(symptom);
    diagnosisData.screenType.push(nextScreenType);
    diagnosisData.screenIndex++;

    navigation.push("diagnosis");
  };

  const addSymptomLength = (length, nextScreenType) => {
    diagnosisData["symptomList"][screenIndex - 1]["length"] = length; // FIX ERROR
    diagnosisData.screenType.push(nextScreenType);
    diagnosisData.screenIndex++;

    // if (previousScreenType === "selectSymptom") symptomList.filter(
    //   (symptomListSymptom) => symptomListSymptom["id"] === symptom["id"]
    // )
  };

  const rewindSymptom = () => {
    const lastScreenIsSymptomLength =
      diagnosisData["screenType"][screenIndex - 1] === "symptomLength";

    if (lastScreenIsSymptomLength) {
      delete diagnosisData.symptomList[diagnosisData.symptomList.length - 1]
        .length;

      diagnosisData.screenType.splice(-1);
      diagnosisData.screenIndex--;
      console.log(diagnosisData);
      navigation.goBack();
      return;
    }
    if (diagnosisData.screenIndex > 0 && !lastScreenIsSymptomLength) {
      diagnosisData.symptomList.splice(-1);
      diagnosisData.screenType.splice(-1);
      diagnosisData.screenIndex--;
    }

    console.log(diagnosisData);
    navigation.goBack();
  };

  const selectedSymptomHandler = (symptom) => {
    const id = symptom.id;

    if (id === "heavy_diarrhea") {
      addSymptom(symptom, "symptomLength");
    } else {
      addSymptom(symptom, "symptomLength");
    }
  };

  const selectedSymptomLengthHandler = (symptomLengthValue) => {
    addSymptomLength(symptomLengthValue, "selectSymptom");
    navigation.push("diagnosis");
  };

  return (
    <RootContainer>
      {screenType === "selectSymptom" && (
        <SelectSymptom
          symptomList={symptomList}
          selectedSymptomHandler={selectedSymptomHandler}
          diagnosisData={diagnosisData}
        />
      )}
      {screenType === "symptomLength" && (
        <SelectOptions
          headerText={`‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£${
            symptomList.find(
              (symptom) =>
                symptom["id"] === diagnosisData.symptomList.slice(-1)[0]["id"]
            ).name
          }‡∏°‡∏≤‡∏ô‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô‡πÅ‡∏•‡πâ‡∏ß?`}
          optionsList={symptomLengthList}
          onOptionPress={selectedSymptomLengthHandler}
        />
      )}
      {/* <BlurView style={s.bottomBar} intensity={100}>
        <Text>Progress</Text>
      </BlurView> */}
      <CustomButton style={s.backButton} onPress={rewindSymptom}>
        <Text>‡∏Å‡∏•‡∏±‡∏ö</Text>
      </CustomButton>
    </RootContainer>
  );
};

const s = StyleSheet.create({
  headerText: {
    fontSize: 40,
    fontFamily: "SemiBold",
  },
  headerDescriptionText: {
    fontSize: 15,
    fontFamily: "SemiBold",
    marginBottom: 10,
  },
  // bottomBar: {
  //   position: "absolute",
  //   bottom: 0,
  //   left: 0,
  //   width: screenWidth,
  //   padding: 30,
  // },
  backButton: {
    position: "absolute",
    bottom: 30,
    left: 30,
    backgroundColor: "#fdfdfd",
    padding: 20,
    borderRadius: 20,
    shadowColor: "black",
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 6,
    shadowOpacity: 0.25,
  },
});

export default Diagnosis;

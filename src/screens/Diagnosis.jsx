import { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  Image,
  TextInput,
  FlatList,
  Dimensions,
} from "react-native";
import { BlurView } from "expo-blur";
import { useNavigation } from "@react-navigation/native";
import CustomButton from "../components/CustomButton";
import RootContainer from "../components/RootContainer";

const { height: screenHeight, width: screenWidth } = Dimensions.get("window");

const Diagnosis = (props) => {
  const navigation = useNavigation();
  const [searchFieldValue, setSearchFieldValue] = useState("");
  const [originalSymptomList] = useState([
    {
      id: "fever",
      name: "ü§í ‡πÑ‡∏Ç‡πâ",
      description:
        "‡∏†‡∏≤‡∏ß‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
    },
    {
      id: "runny_nose",
      name: "ü§ß ‡∏ô‡πâ‡∏≥‡∏°‡∏π‡∏Å‡πÑ‡∏´‡∏•",
      description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏¢‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏à‡∏°‡∏π‡∏Å ‡∏°‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ß‡∏±‡∏î",
    },
    {
      id: "cough",
      name: "üò∑ ‡πÑ‡∏≠",
      description: "‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Å‡∏õ‡∏•‡∏≠‡∏°‡πÉ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à",
    },
    {
      id: "headache",
      name: "ü§ï ‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß",
      description:
        "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏õ‡∏ß‡∏î‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏®‡∏µ‡∏£‡∏©‡∏∞ ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î ‡πÑ‡∏°‡πÄ‡∏Å‡∏£‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏ß‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
    },
    {
      id: "chills",
      name: "ü§í ‡∏´‡∏ô‡∏≤‡∏ß‡∏™‡∏±‡πà‡∏ô",
      description: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏´‡∏ô‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏™‡∏±‡πà‡∏ô ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏°‡∏µ‡πÑ‡∏Ç‡πâ‡∏™‡∏π‡∏á",
    },
    {
      id: "nausea",
      name: "ü§¢ ‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏™‡πâ",
      description: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏û‡∏≤‡∏∞‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ô‡∏≥‡πÑ‡∏õ‡∏™‡∏π‡πà‡∏≠‡∏≤‡πÄ‡∏à‡∏µ‡∏¢‡∏ô",
    },
    {
      id: "stomach_pain",
      name: "ü§ï ‡∏õ‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á",
      description: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ó‡πâ‡∏≠‡∏á ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
    },
    {
      id: "fatigue",
      name: "üò¥ ‡∏≠‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏•‡∏µ‡∏¢",
      description:
        "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏•‡πâ‡∏≤ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î",
    },
    {
      id: "sore_throat",
      name: "ü§í ‡πÄ‡∏à‡πá‡∏ö‡∏Ñ‡∏≠",
      description: "‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏à‡πá‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏ö‡∏Ñ‡∏≠ ‡∏°‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡∏•‡∏≥‡∏Ñ‡∏≠",
    },
    {
      id: "ear_congestion",
      name: "üëÇ ‡∏´‡∏π‡∏≠‡∏∑‡πâ‡∏≠",
      description:
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏∏‡∏î‡∏Å‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡∏´‡∏π ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏≠‡∏≤‡∏Å‡∏≤‡∏®",
    },
  ]);
  const [listType, setListType] = useState("symptomList");
  const [symptomList, setSymptionList] = useState(originalSymptomList);
  const [pageValues, setPageValues] = useState({
    header: "‡∏°‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏£‡∏Ñ‡∏Å‡∏±‡∏ô",
    subheader: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
  });

  const searchFieldHandler = (text) => {
    setSearchFieldValue(text); // Update the search field value
    const filteredSymptomList = originalSymptomList.filter((symptom) => {
      return symptom.name.includes(text); // Use the 'text' parameter directly here
    });
    setSymptionList(filteredSymptomList); // Update the displayed list
  };

  const selectedSymptomHandler = (symptomName) => {
    setPageValues({ header: symptomName, subheader: symptomName });
    setListType("temperature");
  };

  return (
    <RootContainer>
      <Text style={s.headerText}>{pageValues.header}</Text>
      <Text style={s.headerDescriptionText}>{pageValues.subheader}</Text>
      {listType === "symptomList" && (
        <>
          <TextInput
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£..."
            style={s.searchField}
            value={searchFieldValue}
            onChangeText={searchFieldHandler} // Call the handler with each change
          />
          {symptomList.length === 0 && (
            <View style={s.symptomListItem__notFound}>
              <Text style={s.symptomListItem__notFoundText}>
                ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‚õìÔ∏è‚Äçüí•
              </Text>
            </View>
          )}
          <FlatList
            data={symptomList}
            keyExtractor={(symptom) => symptom.id}
            style={s.symptomList}
            renderItem={({ item: symptom, index }) => {
              return (
                <View
                  style={[
                    s.symptomListItem,
                    index === symptomList.length - 1 && { marginBottom: 100 },
                  ]}
                >
                  <Text style={s.symptomListItem__titleText}>
                    {symptom.name}
                  </Text>
                  <Text style={s.symptomListItem__descriptionText}>
                    {symptom.description}
                  </Text>
                  <CustomButton
                    onPress={() => selectedSymptomHandler(symptom.id)}
                    style={s.symptomListItem__button}
                    pressedStyle={s.homeListItem__buttonPressed}
                  >
                    <Text style={s.symptomListItem__buttonText}>{">"}</Text>
                  </CustomButton>
                </View>
              );
            }}
          />
        </>
      )}
      <BlurView style={s.bottomBar} intensity={100}>
        <Text>Hello</Text>
      </BlurView>
    </RootContainer>
  );
};

const s = StyleSheet.create({
  headerText: {
    fontSize: 40,
    fontFamily: "SemiBold",
  },
  headerDescriptionText: {
    fontSize: 15,
    fontFamily: "SemiBold",
    marginBottom: 10,
  },
  symptomList: {
    borderRadius: 20,
  },
  symptomListItem: {
    width: "100%",
    backgroundColor: "#fff",
    borderRadius: 20,
    marginBottom: 20,
    padding: 20,
    flexDirection: "row",
    gap: 10,
    alignItems: "center",
    overflow: "visible",
  },
  symptomListItem__notFound: {
    width: "100%",
    backgroundColor: "#fff",
    borderRadius: 20,
    padding: 20,
  },
  symptomListItem__notFoundText: {
    textAlign: "center",
    fontFamily: "SemiBold",
  },
  symptomListItem__titleText: {
    fontSize: 20,
    fontFamily: "SemiBold",
    flex: 1,
  },
  symptomListItem__descriptionText: {
    flex: 1,
    fontFamily: "SemiBold",
  },
  symptomListItem__button: {
    flex: 0.3,
    backgroundColor: "#3246FF",
    paddingVertical: 30,
    borderRadius: 100,
    justifyContent: "center",
  },
  symptomListItem__buttonText: {
    textAlign: "center",
    color: "#fff",
    fontWeight: 800,
  },
  searchField: {
    backgroundColor: "#fff",
    padding: 15,
    borderRadius: 100,
    marginBottom: 20,
    fontFamily: "SemiBold",
  },
  homeListItem__button: {
    position: "absolute",
    bottom: 40,
    right: 40,
    backgroundColor: "#3246FF",
    width: "40%",
    height: 40,
    borderRadius: 100,
    alignItems: "center",
    justifyContent: "center",
    marginLeft: "auto",
  },
  homeListItem__buttonText: {
    color: "#fff",
    fontFamily: "SemiBold",
  },
  homeListItem__buttonPressed: {
    backgroundColor: "#2533b3",
    elevation: 1,
    shadowColor: "black",
    shadowOffset: { width: 0, height: 2 },
    shadowRadius: 6,
    shadowOpacity: 0.25,
  },
  bottomBar: {
    position: "absolute",
    bottom: 0,
    left: 0,
    width: screenWidth,
    padding: 30,
  },
});

export default Diagnosis;
